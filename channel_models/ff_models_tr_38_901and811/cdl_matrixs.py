"""
File: cdl_matrixs.py

Purpose:
Matrices definition for the implementation of the CDL channel as defined in ETSI TR_38.901 v17.0.0.

Authors: Ernesto Fontes Pupo / Claudia Carballo González
Date: 2024-10-30
Version: 1.0.0
SPDX-License-Identifier: Apache-2.0

"""


import numpy as np

# ETSI TR_38.901 v17.0.0 Table 7.7.1-1to5
# cdl:Clustered Delay Line
# cp:cluster_parameters
cdl_cp = {
    #    Delay   Power   AOD     AOA     ZOD     ZOA
    #    [ns]    [dB]    [deg]   [deg]   [deg]   [deg]
    # Table 7.7.1-1: CDL-A
    "A": np.array(
        [
            [0.0000, -13.4, -178.10, +51.30, +050.2, 125.4],
            [0.3819, +0.00, -4.2000, -152.7, +093.2, 091.3],
            [0.4025, -2.20, -4.2000, -152.7, +093.2, 091.3],
            [0.5868, -4.00, -4.2000, -152.7, +093.2, 091.3],
            [0.4610, -6.00, +90.200, +76.60, +122.0, 094.0],
            [0.5375, -8.20, +90.200, +76.60, +122.0, 094.0],
            [0.6708, -9.90, +90.200, +76.60, +122.0, 094.0],
            [0.5750, -10.5, +121.50, -1.800, +150.2, 047.1],
            [0.7618, -7.50, -81.700, -41.90, +055.2, 056.0],
            [1.5375, -15.9, +158.40, +94.20, +026.4, 030.1],
            [1.8978, -6.60, -83.000, +51.90, +126.4, 058.8],
            [2.2242, -16.7, +134.80, -115.9, +171.6, 026.0],
            [2.1718, -12.4, -153.00, +26.60, +151.4, 049.2],
            [2.4942, -15.2, -172.00, +76.60, +157.2, 143.1],
            [2.5119, -10.8, -129.90, -07.00, +047.2, 117.4],
            [3.0582, -11.3, -136.00, -23.00, +040.4, 122.7],
            [4.0810, -12.7, +165.40, -47.20, +043.3, 123.2],
            [4.4579, -16.2, +148.40, +110.4, +161.8, 032.6],
            [4.5695, -18.3, +132.70, +144.5, +010.8, 027.2],
            [4.7966, -18.9, -118.60, +155.3, +016.7, 015.2],
            [5.0066, -16.6, -154.10, +102.0, +171.7, 146.0],
            [5.3043, -19.9, +126.50, -151.8, +022.7, 150.7],
            [9.6586, -29.7, -56.200, +55.20, +144.9, 156.1],
        ],
        dtype=np.float_,
    ),
    # Table 7.7.1-2: CDL-B
    "B": np.array(
        [
            [0.0000, +0.00, +009.30, -173.3, +105.8, +78.9],
            [0.1072, -02.2, +009.30, -173.3, +105.8, +78.9],
            [0.2155, -04.0, +009.30, -173.3, +105.8, +78.9],
            [0.2095, -03.2, -034.10, +125.5, +115.3, +63.3],
            [0.2870, -09.8, -065.40, -088.0, +119.3, +59.9],
            [0.2986, -01.2, -011.40, +155.1, +103.2, +67.5],
            [0.3752, -03.4, -011.40, +155.1, +103.2, +67.5],
            [0.5055, -05.2, -011.40, +155.1, +103.2, +67.5],
            [0.3681, -07.6, -067.20, -089.8, +118.2, +82.6],
            [0.3697, -03.0, +052.50, +132.1, +102.0, +66.3],
            [0.5700, -08.9, -072.00, -083.6, +100.4, +61.6],
            [0.5283, -09.0, +074.30, +095.3, +098.3, +58.0],
            [1.1021, -4.80, -052.20, +103.7, +103.4, +78.2],
            [1.2756, -5.70, -050.50, -087.8, +102.5, +82.0],
            [1.5474, -7.50, +061.40, -092.5, +101.4, +62.4],
            [1.7842, -1.90, +030.60, -139.1, +103.0, +78.0],
            [2.0169, -7.60, -072.50, -090.6, +100.0, +60.9],
            [2.8294, -12.2, -090.60, +058.6, +115.2, +82.9],
            [3.0219, -9.80, -077.60, -079.0, +100.5, +60.8],
            [3.6187, -11.4, -082.60, +065.8, +119.6, +57.3],
            [4.1067, -14.9, -103.60, +052.7, +118.7, +59.9],
            [4.2790, -9.20, +075.60, +088.7, +117.8, +60.1],
            [4.7834, -11.3, -077.60, -060.4, +115.7, +62.3],
        ],
        dtype=np.float_,
    ),
    # Table 7.7.1-3: CDL-C
    "C": np.array(
        [
            [0.0000, -04.4, -046.6, -101.0, +097.2, +087.6],
            [0.2099, -01.2, -022.8, +120.0, +098.6, +072.1],
            [0.2219, -03.5, -022.8, +120.0, +098.6, +072.1],
            [0.2329, -05.2, -022.8, +120.0, +098.6, +072.1],
            [0.2176, -02.5, -040.7, -127.5, +100.6, +070.1],
            [0.6366, +00.0, +000.3, +170.4, +099.2, +075.3],
            [0.6448, -02.2, +000.3, +170.4, +099.2, +075.3],
            [0.6560, -03.9, +000.3, +170.4, +099.2, +075.3],
            [0.6584, -07.4, +073.1, +055.4, +105.2, +067.4],
            [0.7935, -07.1, -064.5, +066.5, +095.3, +063.8],
            [0.8213, -10.7, +080.2, -048.1, +106.1, +071.4],
            [0.9336, -11.1, -097.1, +046.9, +093.5, +060.5],
            [1.2285, -05.1, -055.3, +068.1, +103.7, +090.6],
            [1.3083, -06.8, -064.3, -068.7, +104.2, +060.1],
            [2.1704, -08.7, -078.5, +081.5, +093.0, +061.0],
            [2.7105, -13.2, +102.7, +030.7, +104.2, +100.7],
            [4.2589, -13.9, +099.2, -016.4, +094.9, +062.3],
            [4.6003, -13.9, +088.8, +003.8, +093.1, +066.7],
            [5.4902, -15.8, -101.9, -013.7, +092.2, +052.9],
            [5.6077, -17.1, +092.2, +009.7, +106.7, +061.8],
            [6.3065, -16.0, +093.3, +005.6, +093.0, +051.9],
            [6.6374, -15.7, +106.6, +000.7, +092.9, +061.7],
            [7.0427, -21.6, +119.5, -021.9, +105.2, +058.0],
            [8.6523, -22.8, -123.8, +033.6, +107.8, +057.0],
        ],
        dtype=np.float_,
    ),
    # Table 7.7.1-4: CDL-D
    "D": np.array(
        [
            [00.000, -00.2, +000.0, -180.0, +098.5, +81.5],
            [00.000, -13.5, +000.0, -180.0, +098.5, +81.5],
            [00.035, -18.8, +089.2, +089.2, +085.5, +86.9],
            [00.612, -21.0, +089.2, +089.2, +085.5, +86.9],
            [01.363, -22.8, +089.2, +089.2, +085.5, +86.9],
            [01.405, -17.9, +013.0, +163.0, +097.5, +79.4],
            [01.804, -20.1, +013.0, +163.0, +097.5, +79.4],
            [02.596, -21.9, +013.0, +163.0, +097.5, +79.4],
            [01.775, -22.9, +034.6, -137.0, +098.5, +78.2],
            [04.042, -27.8, -064.5, +074.5, +088.4, +73.6],
            [07.937, -23.6, -032.9, +127.7, +091.3, +78.3],
            [09.424, -24.8, +052.6, -119.6, +103.8, +87.0],
            [09.708, -30.0, -132.1, -009.1, +080.3, +70.6],
            [12.525, -27.7, +077.2, -083.8, +086.5, +72.9],
        ],
        dtype=np.float_,
    ),
    # Table 7.7.1-5: CDL-E
    "E": np.array(
        [
            [00.0000, -00.03, +00.0, -180.0, +099.6, +80.4],
            [00.0000, -22.03, +00.0, -180.0, +099.6, +80.4],
            [00.5133, -15.80, +57.5, +018.2, +104.2, +80.4],
            [00.5440, -18.10, +57.5, +018.2, +104.2, +80.4],
            [00.5630, -19.80, +57.5, +018.2, +104.2, +80.4],
            [00.5440, -22.90, -20.1, +101.8, +099.4, +80.8],
            [00.7112, -22.40, +16.2, +112.9, +100.8, +86.3],
            [1.90920, -18.60, +09.3, -155.5, +098.8, +82.7],
            [1.92930, -20.80, +09.3, -155.5, +098.8, +82.7],
            [1.95890, -22.60, +09.3, -155.5, +098.8, +82.7],
            [2.64260, -22.30, +19.0, -143.3, +100.8, +82.9],
            [3.71360, -25.60, +32.7, -094.7, +096.4, +88.0],
            [5.45240, -20.20, +00.5, +147.0, +098.9, +81.0],
            [12.0034, -29.80, +55.9, -036.2, +095.6, +88.6],
            [20.6419, -29.20, +57.6, -026.0, +104.6, +78.3],
        ],
        dtype=np.float_,
    ),
    # Table 6.9.1-1 NTN-CDL-A at elevation
    "A_ntn": np.array(
        [
            [00.0000, 00.0, +00.0, 178.8, 140, 35.6],
            [1.0811, -4.675, +00.0, -115.7, 140, 22.9],
            [2.8416, -6.482, +00.0, 111.5, 140, 127.4 ],

        ],
        dtype=np.float_,
    ),
    # Table 6.9.1-2 NTN-CDL-B at elevation
    "B_ntn": np.array(
        [
            [00.0000, 00.0, +00.0, -174.6, 140, 42.2],
            [0.7249, -1.973, +00.0, 144.9, 140, 63.4],
            [0.7410, -4.332, +00.0, -119.8, 140, 89.7],
            [5.7392, -11.914, +00.0, -88.8, 140, 174.1],

        ],
        dtype=np.float_,
    ),
    # Table 6.9.1-3 NTN-CDL-C at elevation
    "C_ntn": np.array(
        [
            [00.0000, -0.394, +00.0, -180, 140, 40.0],
            [0.0, -10.618, +00.0, -180, 140, 40],
            [14.8124, -23.373, +00.0, -75.9, 140, 87.1],

        ],
        dtype=np.float_,
    ),

    # Table 6.9.1-4 NTN-CDL-D at elevation
    "D_ntn": np.array(
        [
            [00.0000, -0.284, +00.0, -180, 140, 40.0],
            [0.0, -11.991, +00.0, -180, 140, 40],
            [0.5596, -9.887, +00.0, -135.4, 140, 146.2],
            [7.3340, -16.771, +00.0, -121.5, 140, 136.0],

        ],
        dtype=np.float_,
    ),
}

# ETSI TR_38.901 v17.0.0 Table 7.7.1-1to5 (lower part)
# pcp: Per-Cluster Parameters:
cdl_pcp = {
    # cASD in [°], cASA in [°], cZSD in [°],cZSA in [°],XPR in [dB]
    "A": np.array([05.0, 11.0, 3.0, 3.0, 10.0, False]),  # Table 7.7.1-1: CDL-A
    "B": np.array([10.0, 22.0, 3.0, 7.0, 08.0, False]),  # Table 7.7.1-2: CDL-B
    "C": np.array([02.0, 15.0, 3.0, 7.0, 07.0, False]),  # Table 7.7.1-2: CDL-C
    "D": np.array([05.0, 08.0, 3.0, 3.0, 11.0, True]),  # Table 7.7.1-4: CDL-D
    "E": np.array([05.0, 11.0, 3.0, 7.0, 08.0, True]),  # Table 7.7.1-5: CDL-E
    "A_ntn": np.array([0, 15.0, 0, 7.0, 10.0, False]),  # Table 7.7.1-1: CDL-A
    "B_ntn": np.array([0, 15.0, 3.0, 7.0, 10.0, False]),  # Table 7.7.1-2: CDL-B
    "C_ntn": np.array([0, 11.0, 0, 7.0, 16.0, False]),  # Table 7.7.1-2: CDL-C
    "D_ntn": np.array([0, 11.0, 0, 7.0, 16.0, True]),  # Table 7.7.1-4: CDL-D
}

# Ray offset angles
# Table 7.5-3 in ETSI TR 138 901 v17.0.0
ray_offset_angles = np.array(
    [
        0.0447, -0.0447,
        0.1413, -0.1413,
        0.2492, -0.2492,
        0.3715, -0.3715,
        0.5129, -0.5129,
        0.6797, -0.6797,
        0.8844, -0.8844,
        1.1481, -1.1481,
        1.5195, -1.5195,
        2.1551, -2.1551,
    ],
    dtype=np.float_,
)

# Large scale cross correlations
# TR 138.901 v17.0.0 Table 7.5-6


umi_large_scale_correlations = np.array(
    [
        # LOS   NLOS  O2I
        [+0.5, +0.0, +0.4],  # 0: ASD vs DS
        [+0.8, +0.4, +0.4],  # 1: ASA vs DS
        [-0.4, -0.4, +0.0],  # 2: ASA VS SF
        [-0.5, +0.0, +0.2],  # 3: ASD vs SF
        [-0.4, -0.7, -0.5],  # 4: DS vs SF
        [+0.4, +0.0, +0.0],  # 5: ASD vs ASA
        [-0.2, +0.0, +0.0],  # 6: ASD vs K
        [-0.3, +0.0, +0.0],  # 7: ASA vs K
        [-0.7, +0.0, +0.0],  # 8: DS vs K
        [+0.5, +0.0, +0.0],  # 9: SF vs K
        [+0.0, +0.0, +0.0],  # 10: ZSD vs SF
        [+0.0, +0.0, +0.0],  # 11: ZSA vs SF
        [+0.0, +0.0, +0.0],  # 12: ZSD vs K
        [+0.0, +0.0, +0.0],  # 13: ZSA vs K
        [+0.0, -0.5, -0.6],  # 14: ZSD vs DS
        [+0.2, +0.0, -0.2],  # 15: ZSA vs DS
        [+0.5, +0.5, -0.2],  # 16: ZSD vs ASD
        [+0.3, +0.5, +0.0],  # 17: ZSA vs ASD
        [+0.0, +0.0, +0.0],  # 18: ZSD vs ASA
        [+0.0, +0.2, +0.5],  # 19: ZSA vs ASA
        [+0.0, +0.0, +0.5],  # 20: ZSD vs ZSA
    ],
    dtype=np.float_,
).T

uma_large_scale_correlations = np.array(
    [
        # LOS   NLOS  O2I
        [+0.4, +0.4, +0.4],  # 0: ASD vs DS
        [+0.8, +0.6, +0.4],  # 1: ASA vs DS
        [-0.5, +0.0, +0.0],  # 2: ASA VS SF
        [-0.5, -0.6, +0.2],  # 3: ASD vs SF
        [-0.4, -0.4, -0.5],  # 4: DS vs SF
        [+0.0, +0.4, +0.0],  # 5: ASD vs ASA
        [+0.0, +0.0, +0.0],  # 6: ASD vs K
        [-0.2, +0.0, +0.0],  # 7: ASA vs K
        [-0.4, +0.0, +0.0],  # 8: DS vs K
        [+0.0, +0.0, +0.0],  # 9: SF vs K
        [+0.0, +0.0, +0.0],  # 10: ZSD vs SF
        [-0.8, -0.4, +0.0],  # 11: ZSA vs SF
        [+0.0, +0.0, +0.0],  # 12: ZSD vs K
        [+0.0, +0.0, +0.0],  # 13: ZSA vs K
        [-0.2, -0.5, -0.6],  # 14: ZSD vs DS
        [+0.0, +0.0, -0.2],  # 15: ZSA vs DS
        [+0.5, +0.5, -0.2],  # 16: ZSD vs ASD
        [+0.0, -0.1, +0.0],  # 17: ZSA vs ASD
        [-0.3, +0.0, +0.0],  # 18: ZSD vs ASA
        [+0.4, +0.0, +0.5],  # 19: ZSA vs ASA
        [+0.0, +0.0, +0.5],  # 20: ZSD vs ZSA
    ],
    dtype=np.float_,
).T

rma_large_scale_correlations = np.array(
    [
        # LOS     NLOS   O2I
        [+0.00, -0.40, +0.00],  # 0: ASD vs DS
        [+0.00, +0.00, +0.00],  # 1: ASA vs DS
        [+0.00, +0.00, +0.00],  # 2: ASA VS SF
        [+0.00, +0.60, +0.00],  # 3: ASD vs SF
        [-0.50, -0.50, +0.00],  # 4: DS vs SF
        [+0.00, +0.00, -+0.70],  # 5: ASD vs ASA
        [+0.00, +0.00, +0.00],  # 6: ASD vs K
        [+0.00, +0.00, +0.00],  # 7: ASA vs K
        [+0.00, +0.00, +0.00],  # 8: DS vs K
        [+0.00, +0.00, +0.00],  # 9: SF vs K
        [+0.01, -0.04, +0.00],  # 10: ZSD vs SF
        [-0.17, -0.25, +0.00],  # 11: ZSA vs SF
        [+0.00, +0.00, +0.00],  # 12: ZSD vs K
        [-0.02, +0.00, +0.00],  # 13: ZSA vs K
        [-0.05, -0.10, -0.60],  # 14: ZSD vs DS
        [+0.27, -0.40, +0.00],  # 15: ZSA vs DS
        [+0.73, +0.42, +0.66],  # 16: ZSD vs ASD
        [-0.14, -0.27, +0.47],  # 17: ZSA vs ASD
        [-0.20, -0.18, -0.55],  # 18: ZSD vs ASA
        [+0.24, +0.26, -0.22],  # 19: ZSA vs ASA
        [-0.07, -0.27, +0.00],  # 20: ZSD vs ZSA
    ],
    dtype=np.float_,
).T

inh_large_scale_correlations = np.array(
    [
        # LOS     NLOS
        [+0.60, +0.40],  # 0: ASD vs DS
        [+0.80, +0.00],  # 1: ASA vs DS
        [-0.50, -0.40],  # 2: ASA VS SF
        [-0.40, +0.00],  # 3: ASD vs SF
        [-0.80, -0.50],  # 4: DS vs SF
        [+0.40, +0.00],  # 5: ASD vs ASA
        [+0.00, +0.00],  # 6: ASD vs K
        [+0.00, +0.00],  # 7: ASA vs K
        [-0.50, +0.00],  # 8: DS vs K
        [+0.50, +0.00],  # 9: SF vs K
        [+0.20, +0.00],  # 10: ZSD vs SF
        [+0.30, +0.00],  # 11: ZSA vs SF
        [+0.00, +0.00],  # 12: ZSD vs K
        [+0.10, +0.00],  # 13: ZSA vs K
        [+0.10, -0.27],  # 14: ZSD vs DS
        [+0.20, -0.06],  # 15: ZSA vs DS
        [+0.50, +0.35],  # 16: ZSD vs ASD
        [+0.00, +0.23],  # 17: ZSA vs ASD
        [+0.00, -0.08],  # 18: ZSD vs ASA
        [+0.50, +0.43],  # 19: ZSA vs ASA
        [+0.00, +0.42],  # 20: ZSD vs ZSA
    ],
    dtype=np.float_,
).T

inf_large_scale_correlations = np.array(
    [
        # LOS     NLOS
        [+0.00, +0.00],  # 0: ASD vs DS
        [+0.00, +0.00],  # 1: ASA vs DS
        [+0.00, +0.00],  # 2: ASA VS SF
        [+0.00, +0.00],  # 3: ASD vs SF
        [+0.00, +0.00],  # 4: DS vs SF
        [+0.00, +0.00],  # 5: ASD vs ASA
        [-0.50, +0.00],  # 6: ASD vs K
        [+0.00, +0.00],  # 7: ASA vs K
        [-0.70, +0.00],  # 8: DS vs K
        [+0.00, +0.00],  # 9: SF vs K
        [+0.00, +0.00],  # 10: ZSD vs SF
        [+0.00, +0.00],  # 11: ZSA vs SF
        [+0.00, +0.00],  # 12: ZSD vs K
        [+0.00, +0.00],  # 13: ZSA vs K
        [+0.00, +0.00],  # 14: ZSD vs DS
        [+0.00, +0.00],  # 15: ZSA vs DS
        [+0.00, +0.00],  # 16: ZSD vs ASD
        [+0.00, +0.00],  # 17: ZSA vs ASD
        [+0.00, +0.00],  # 18: ZSD vs ASA
        [+0.00, +0.00],  # 19: ZSA vs ASA
        [+0.00, +0.00],  # 20: ZSD vs ZSA
    ],
    dtype=np.float_,
).T

umi_mean_spread = np.array(
    [
        # LOS   NLOS  O2I
        [-7.14, -6.83, -6.62],  # 0: DS
        [+1.21, +1.53, +1.25],  # 1: AOD
        [+1.73, +1.81, +1.76],  # 2: AOA
        [0.73, 0.92, 1.01],  # 3: ZOA
        [9.0, None, None],  # 4: K
    ],
    dtype=np.float_,
)

umi_std_spread = np.array(
    [
        # LOS   NLOS  O2I
        [0.38, 0.28, 0.32],  # 0: DS
        [0.41, 0.33, 0.42],  # 1: AOD
        [0.28, 0.3, 0.16],  # 2: AOA
        [0.34, 0.41, 0.43],  # 3: ZOA
        [5.0, None, None],  # 4: K
    ],
    dtype=np.float_,
)

k_mean_std = {
    # mean  std
    "UMi": [9.0, 5.0],
    "UMa": [9.0, 3.5],
    "RMa": [7.0, 4.5],
    "InH": [7.0, 4.0],
    "InF": [7.0, 8.0]
}
def ds_mean_std(channel_model, fc, los, o2i):
    # V = hall volume in m3, S = total surface area of hall in m2 (walls+floor+ceiling)
    # Small Hall: Volume (V): Approximately 500 to 1,500 cubic meters, Surface Area (S): Approximately 300 to 600 square meters
    # Medium Hall: Volume (V): Approximately 1,500 to 3,000 cubic meters, Surface Area (S): Approximately 600 to 1,200 square meters
    # Large Hall: Volume (V): Approximately 3,000 to 10,000 cubic meters, Surface Area (S): Approximately 1,200 to 3,000 square meters
    # TODO, It will be important to make this variable dynamically configurable
    v = 2000 # typical Medium Hall
    s = 800 # typical Medium Hall
    ds_mean_std_all = {
        # LOS       NLOS       O2I
        # mean  std, mean  std, mean  std
        "UMi": [[-0.24*np.log10(1+fc) - 7.14, 0.38], [-0.24*np.log10(1+fc) - 6.83, 0.28], [-6.62, 0.32]],
        "UMa": [[-6.955-0.0963**np.log10(fc), 0.66], [-6.28-0.204*np.log10(fc), 0.39], [-6.62, 0.32]],
        "RMa": [[-7.49, 0.55], [-7.43, 0.48], [-7.47, 0.24]],
        "InH": [[-0.01*np.log10(1 + fc) - 7.692, 0.18], [-0.28*np.log10(1 + fc) - 7.173, 0.10*np.log10(1 + fc) + 0.055]],
        "InF": [[np.log10(26*(v/s)+14) - 9.35, 0.15], [np.log10(30*(v/s)+32) - 9.44, 0.19]]
    }
    if o2i: ds_mean_std = ds_mean_std_all[channel_model][2]
    else:
        if los: ds_mean_std = ds_mean_std_all[channel_model][0]
        else: ds_mean_std = ds_mean_std_all[channel_model][1]

    return ds_mean_std

delay_scaling = {
    # los nlos o2i
    "UMi": [3.0, 2.1, 2.2],
    "UMa": [2.2, 2.5, 2.3],
    "RMa": [3.8, 1.7, 1.7],
    "InH": [3.6, 3, None],
    "InF": [2.7, 3, None]
}

desired_delay_spread = np.array(
    [
        # DS_desired
        10*1e-9,  # Very short delay spread
        30*1e-9,  # Short delay spread
        100*1e-9,  # Nominal delay spread
        300*1e-9,  # Long delay spread
        1000*1e-9,  # Very long delay spread
    ],
    dtype=np.float_,
)


# def c_mm(large_scale_correlations):
#     c_cmm_matrix = np.empty((3, 7, 7), dtype=np.float_)
#     for c, C in enumerate(large_scale_correlations):
#         c_mm_squared = np.array(
#             [
#                 #    DS,    ASD,   ASA,   ZSA,   ZSD,   K,     SF
#                 [1.0, C[0], C[1], C[15], C[14], C[8], C[4]],  # DS
#                 [C[0], 1.0, C[5], C[17], C[16], C[6], C[3]],  # ASD
#                 [C[1], C[5], 1.0, C[19], C[18], C[7], C[2]],  # ASA
#                 [C[15], C[17], C[19], 1.0, C[20], C[13], C[11]],  # ZSA
#                 [C[14], C[16], C[18], C[20], 1.0, C[12], C[10]],  # ZSD
#                 [C[8], C[6], C[7], C[13], C[12], 1.0, C[9]],  # K
#                 [C[4], C[3], C[2], C[11], C[10], C[9], 1.0],  # SF
#             ],
#             dtype=np.float_,
#         )
#
#         # Section 4 of ETSI TR 138.901 v17.0.0 hints at using the cholesky decomposition
#         # to enforce the expected cross-correlations between the large-scale parameters
#         c_cmm_matrix[c, ...] = np.linalg.cholesky(c_mm_squared)
#
#     return c_cmm_matrix, c_mm_squared


# c_cmm_matrix, c_mm_squared = c_mm(umi_large_scale_correlations)
# print("c_cmm_matrix shape",c_cmm_matrix)
# print("c_mm_squared shape",c_mm_squared)
